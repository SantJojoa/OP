#include <LiquidCrystal.h>

// Pines de la pantalla LCD
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

// Pines del sensor TMP36, LED y motor
const int tmpSensorPin = A0;
const int ledPin = 6;
const int motorPin = 7;

void setup() {
 // Inicializar la pantalla LCD
 lcd.begin(16, 2);
 lcd.print("Temperatura:");

 // Configurar los pines como salidas/entradas
 pinMode(ledPin, OUTPUT);
 pinMode(motorPin, OUTPUT);
 Serial.begin(9600);
}

void loop() {
 // Leer el valor del sensor TMP36
 int sensorValue = analogRead(tmpSensorPin);

 // Convertir el valor analógico a temperatura (suponiendo una resolución de 10 mV/°C)
 float temperature = (sensorValue * (5.0 / 1023.0) - 0.5) * 100; // Temperatura en °C

 // Mostrar la temperatura en el monitor serial
 Serial.print("Temperatura: ");
 Serial.print(temperature);
 Serial.println(" °C");

 // Mostrar la temperatura en la pantalla LCD
 lcd.setCursor(0, 1);
 lcd.print(temperature);
 lcd.print(" C");

 // Validaciones según la temperatura
 if (temperature <= 10) {
   // Temperatura menor o igual a 10 °C
   intermitenciaLED(0.5);
   digitalWrite(motorPin, LOW);
 } else if (temperature >= 11 && temperature <= 25) {
   // Temperatura entre 11 °C y 25 °C
   digitalWrite(ledPin, LOW);
   digitalWrite(motorPin, LOW);
 } else {
   // Temperatura mayor o igual a 26 °C
   digitalWrite(ledPin, HIGH);
   digitalWrite(motorPin, HIGH);
 }

 delay(1000); // Esperar un segundo antes de la próxima lectura
}

void intermitenciaLED(float retardo) {
 digitalWrite(ledPin, HIGH);
 delay(retardo * 1000);
 digitalWrite(ledPin, LOW);
 delay(retardo * 1000);
}
